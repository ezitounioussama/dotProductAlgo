ALGORITHM dot_product
VAR
v1, v2: ARRAY_OF INTEGER;
n: INTEGER;
ps: INTEGER;
i: INTEGER;
BEGIN
// Input vectors v1 and v2
Write("Enter the number of elements in each vector: ");
Read(n);
Write("Enter elements of first vector: ");
FOR i FROM 0 TO n-1 DO
Read(v1[i]);
END_FOR
Write("Enter elements of second vector: ");
FOR i FROM 0 TO n-1 DO
Read(v2[i]);
END_FOR

// Calculate dot product
ps := 0;
FOR i FROM 0 TO n-1 DO
ps := ps + (v1[i] * v2[i]);
END_FOR
Write("Dot product is: ");
Write(ps);
END
Algorithm to check orthogonality:

ALGORITHM check_orthogonality
VAR
v1, v2: ARRAY_OF INTEGER;
n: INTEGER;
ps: INTEGER;
BEGIN
// Input vectors v1 and v2
Write("Enter the number of elements in each vector: ");
Read(n);
Write("Enter elements of first vector: ");
FOR i FROM 0 TO n-1 DO
Read(v1[i]);
END_FOR
Write("Enter elements of second vector: ");
FOR i FROM 0 TO n-1 DO
Read(v2[i]);
END_FOR

// Call dot_product procedure to calculate dot product
dot_product(v1, v2, n, ps);

// Check orthogonality
IF ps = 0 THEN
Write("Vectors are orthogonal.");
ELSE
Write("Vectors are not orthogonal.");
END_IF
END

Algorithm to check orthogonality using dot_product function:

ALGORITHM check_orthogonality_function
VAR
v1, v2: ARRAY_OF INTEGER;
n: INTEGER;
ps: INTEGER;
BEGIN
// Input vectors v1 and v2
Write("Enter the number of elements in each vector: ");
Read(n);
Write("Enter elements of first vector: ");
FOR i FROM 0 TO n-1 DO
Read(v1[i]);
END_FOR
Write("Enter elements of second vector: ");
FOR i FROM 0 TO n-1 DO
Read(v2[i]);
END_FOR

// Call dot_product function to calculate dot product
ps := dot_product(v1, v2, n);

// Check orthogonality
IF ps = 0 THEN
Write("Vectors are orthogonal.");
ELSE
Write("Vectors are not orthogonal.");
END_IF
END
